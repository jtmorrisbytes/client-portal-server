name: Node.js CI with container

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: ubuntu-latest
    
    # runs all of the steps inside the specified container rather than on the VM host.  
    # Because of this the network configuration changes from host based network to a container network.
    container:
      image:  node:10.16-jessie

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:5.0.9
        ports:
        - 6379:6379
    steps:
    - uses: actions/checkout@v1     
    - run: npm ci
    - run: node client.js
    - run: npm test
      env:
        # use postgres for the host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        DATABASE_HOST: postgres
        DATABASE_PORT: ${{ job.services.postgres.ports[5432] }}
        DATABASE_PASSWORD: postgres
        DATABASE_USERNAME: postgres
        NODE_ENV: 'test'
        REDIS_HOST: redis
        REDIS_PORT: ${{ job.services.redis.ports[6379]}}
        NODE_ENV: test
        CI: true