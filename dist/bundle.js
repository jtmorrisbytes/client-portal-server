!function(e){var t={};function s(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,o){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(o,n,function(t){return e[t]}.bind(null,n));return o},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=12)}([function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("express-session")},function(e,t){e.exports=require("@jtmorrisbytes/lib")},function(e,t){e.exports=require("dotenv")},function(e,t){e.exports=require("morgan")},function(e,t){e.exports=require("massive")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("constants")},function(e,t){e.exports=require("connect-sqlite3")},function(e,t,s){"use strict";s.r(t),function(e){var t=s(5),o=s.n(t),n=s(1),r=s.n(n),i=s(2),a=s.n(i),u=s(0),c=s.n(u),l=s(6),p=s.n(l),f=s(7),d=s.n(f),g=s(8),S=s.n(g),E=s(9),h=s.n(E),m=s(10),y=s.n(m),v=s(3),b=s.n(v),A=s(11),O=s.n(A),R=function(e,t,s,o){return new(s||(s=Promise))((function(n,r){function i(e){try{u(o.next(e))}catch(e){r(e)}}function a(e){try{u(o.throw(e))}catch(e){r(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(i,a)}u((o=o.apply(e,t||[])).next())}))},w=function(e,t){var s,o,n,r,i={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(s)throw new TypeError("Generator is already executing.");for(;i;)try{if(s=1,o&&(n=2&r[0]?o.return:r[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,r[1])).done)return n;switch(o=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return i.label++,{value:r[1],done:!1};case 5:i.label++,o=r[1],r=[0];continue;case 7:r=i.ops.pop(),i.trys.pop();continue;default:if(!(n=i.trys,(n=n.length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){i=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){i.label=r[1];break}if(6===r[0]&&i.label<n[1]){i.label=n[1],n=r;break}if(n&&i.label<n[2]){i.label=n[2],i.ops.push(r);break}n[2]&&i.ops.pop(),i.trys.pop();continue}r=t.call(e,i)}catch(e){r=[6,e],o=0}finally{s=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}},N=(o.a.config(),process.env.SSL_CERT||""),T=process.env.SSL_KEY||"",_=process.env.SSL_CA||"",I=process.env.SESSION_SECRET||"",x=Number(process.env.SERVER_PORT)||3e3,j=process.env.SERVER_HOST||"127.0.0.1",P=r()();P.use(s(14));var D=O()(b.a);b.a;var U={store:new D,secret:I,resave:!1,saveUninitialized:!1,cookie:{maxAge:3e5}};U.cookie.secure=!0,P.use(b()(U)),P.use(r.a.json()),P.use(p()("dev"));var q=s(16);P.use(q.rootPath,q.router);var M=s(25);function L(e){return R(this,void 0,void 0,(function(){var t;return w(this,(function(s){switch(s.label){case 0:return e?[3,2]:[4,d()(M)];case 1:e=s.sent(),s.label=2;case 2:return P.set("db",e),S.a.createServer(P),console.log("launching server in production"),t={key:c.a.readFileSync(a.a.resolve(T||"privkey.pem")),cert:c.a.readFileSync(a.a.resolve(N||"fullchain.pem")),secureOptions:y.a.SSL_OP_NO_SSLv3},_&&(t.ca=[c.a.readFileSync(_)]),[4,h.a.createServer(t,P).listen(x,j,null,null)];case 3:return[2,s.sent()];case 4:return[3,6];case 5:return[2,s.sent()];case 6:return console.log("launching server in test mode"),[4,P.listen(x,j)];case 7:return[2,s.sent()]}}))}))}L().then((function(e){console.log("server listening on "+j+":"+x)}))}.call(this,s(13)(e))},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,s){e.exports=s(15)({contentSecurityPolicy:{directives:{defaultSrc:["'self'"],styleSrc:["'self'","https://stackpath.bootstrapcdn.com/","https://www.aspiesolutions.com/","http://localhost:3000/"]}},expectCt:{maxAge:0,reportUri:"http://aspiesolutions.com/reportct"},featurePolicy:{features:{layoutAnimations:["'self'"],syncScript:["'self'"],documentDomain:["'none'"]}}})},function(e,t){e.exports=require("helmet")},function(e,t,s){const o=s(1).Router,n=(s(0),s(2),process.env.API_ROOT||"/api"),r=o(),{enforceUserLoggedIn:i}=s(17);const a=s(18),{REACT_APP_CLIENT_ID:u}=process.env;r.post(a.basePath+"/logout",a.controller.logOut),r.use(a.basePath,a.router),r.use(i),e.exports={router:r,rootPath:n}},function(e,t,s){const{REASON:o,MESSAGE_NOT_AUTHORIZED:n}=s(4).constants;e.exports={enforceUserLoggedIn:function(e,t,s){e.session.user||t.status(401).json({message:n,reason:o.LOGIN.REQUIRED,path:"/api/auth/login"})}}},function(e,t,s){const o=s(19),{logIn:n,logOut:r,register:i,getUser:a,startAuthSession:u,checkAuthState:c,getSession:l}=o,p=s(1).Router();p.post("/",u),p.get("/user",a),p.get("/session",l),p.post("/register",c,i),p.post("/login",c,n),e.exports={router:p,basePath:"/auth",controller:{logIn:n,logOut:r,register:i}}},function(e,t,s){const{validateEmail:o,validatePassword:n,constants:r}=s(4),i=s(20),a=s(21),u=s(22),c=s(23).inpect||(e=>{}),l=s(24),{MESSAGE_NOT_AUTHORIZED:p,MESSAGE_BAD_REQUEST:f,REASON:d,MESSAGE_NOT_FOUND:g,MESSAGE:S,PASSWORD:E,MAX_ELAPSED_REQUEST_TIME:h}=r,{NIST:m}=E;e.exports={register:async function(e,t){try{const{firstName:s,lastName:r,email:c,phoneNumber:l,streetAddress:p,city:f,state:g,zip:S,password:E}=e.body.user;console.log("/api/auth/register called"),console.dir(e.body),console.dir(e.query);const h=e.app.get("db");if(!c)return void t.status(400).json({message:"field email is required",reason:d.REQUIRED.FIELD});if(!o(c))return void t.status(400).json({message:`invalid email '${c}'`});if((await h.user.getByEmail(c)).length>0)return void t.status(400).json({message:`email ${c} is already in use`});if(!E)return void t.status(400).json({message:"field password is required",reason:d.REQUIRED.FIELD});let y=n(E);if(!1===y.isValid)return void t.status(400).json({message:y.description,reason:y.reason});if(process.env.NIST_TOKEN){console.log("attempting NIST check with token ",process.env.NIST_TOKEN);let e=u(E),{found:s}=await a.get(m.URL+e+"?api_key="+process.env.NIST_TOKEN);if(s)return console.log("Password found in NIST Database, Refusing to allow password"),void t.status(400).json({message:m.MESSAGE,reason:m.REASON,info:"https://pages.nist.gov/800-63-3/"});console.log("Password not found in NIST Database. continuing")}let v=Buffer.from(E).toString("base64"),b=await i.hash(v,await i.genSalt(15)),A=(await h.user.create(s,r,b,c,l,p,f,g,S))[0];console.log("/api/auth/register DB create user result",A),e.session.user={id:A.users_id},t.json({session:e.session})}catch(e){process.stdout.write("Failed to register user ");let s={message:S.GENERAL_FAILURE,reason:d.ERROR.UNKNOWN,error:e};e instanceof SyntaxError?(process.stdout.write("because of a syntax error "),s.reason=d.ERROR.SYNTAX):e instanceof TypeError&&(process.stdout.write("because of a Type Error "),s.reason=d.ERROR.TYPE),t.status(500).json(s),process.stdout.write("with stacktrace:\n"),console.error(e)}},logIn:async function(e,t){console.log("/api/auth/login: login requested user object",e.body.user||"NOT FOUND");try{let{email:s,password:o}=e.body.user;if(s)if(o){console.log("searching database for username");let n=await e.app.get("db").user.getByEmail(s);if(0===n.length)console.warn(`/api/auth/login: user '${s.substr(0,s.indexOf("@")-2)}' not found`),t.status(401).json({message:p,reason:d.USER.NOT_FOUND});else{let s=n[0];console.log("/api/auth/login user found, comparing hash"),authenticated=await i.compare(Buffer.from(o).toString("base64"),s.hash),authenticated?(console.log("logging in user with id:",s.users_id),e.session.user={id:s.users_id},t.json({session:e.session})):(console.warn("/api/auth/login recieved an invalid password"),t.status(401).json({message:p,reason:d.LOGIN.PASSWORD.MISSING}))}}else console.warn("/api/auth/login: password was missing from request"),console.dir(e.body),console.dir(e.query),t.status(400).json({message:f,reason:d.LOGIN.PASSWORD.MISSING});else console.warn("/api/auth/login: email was missing from request"),t.status(400).json({message:f,reason:d.LOGIN.EMAIL.MISSING})}catch(e){process.stdout.write("Failed to log in user ");let s={message:S.GENERAL_FAILURE,reason:d.ERROR.UNKOWN,error:e};e instanceof TypeError&&(process.stdout.write("because of a TypeError"),s.reason=d.ERROR.TYPE),e instanceof ReferenceError&&(process.stdout.write("because of a ReferenceError"),s.reason=d.ERROR.REFERENCE),process.stdout.write(" with stacktrace\n"+c(e)),t.status(500).json(s)}},logOut:async function(e,t){e.session.destroy(),e.clearCookie("connect.sid"),t.sendStatus(200)},getUser:function(e,t){let s=(e.session||{}).user||null;t.json({user:s})},startAuthSession:function(e,t){const s=l.randomBytes(64).toString("base64"),o={state:s,timestamp:Date.now(),ipAddr:e.connection.remoteAddress};e.app.set(s,o),t.json(o)},checkAuthState:function(e,t,s){if(!e.body)return void t.status(400).json({message:f,reason:"MISSING_REQUEST_BODY"});if(!e.body.state)return void t.status(401).json({message:p,reason:d.AUTH.STATE_MISSING,path:"body"});let o=e.app.get(e.body.state);return o?o.ipAddr!=e.connection.remoteAddress?(e.app.set(o.state,void 0),void t.status(401).json({message:p,reason:d.AUTH.IP_MISMATCH})):Date.now()>o.timestamp+h?(e.app.set(o.state,void 0),void t.status(401).json({message:p,reason:d.AUTH.SESSION_EXPIRED})):void s():(console.log(o,e.body.state),void t.status(401).json({message:p,reason:d.AUTH.STATE_NOT_FOUND}))},getSession:async function(e,t){try{let s=e.session||null;t.send(s)}catch(e){console.error("Failed to get session")}}}},function(e,t){e.exports=require("bcryptjs")},function(e,t){e.exports=require("axios")},function(e,t){e.exports=require("sha1")},function(e,t){e.exports=require("util")},function(e,t){e.exports=require("crypto")},function(e,t,s){const o=s(0);let{DATABASE_USERNAME:n,DATABASE_PASSWORD:r,DATABASE_HOST:i,DATABASE_PORT:a,DATABASE_NAME:u,NODE_ENV:c,CI:l}=process.env;function p(e,t){return e?String(e).trim():t}c=p(c,"test");let f={host:p(i,"localhost"),port:p(a,"5432"),database:p(u,"testUser"),user:p(n,"postgres"),password:p(r,"")};console.log(`configureMassive: NODE_ENV is ${c}, config is`,f),console.log("Configuring massive "),"production"===c?(console.log("for production\r\n"),f.ssl={mode:"require",ca:o.readFileSync("db.ca-certificate.crt")}):"development"===c?console.log(" for development\n"):(console.log("for testing "),l?(console.log("on CI\r\n"),console.log("on a local machine")):f.ssl={mode:!0,rejectUnauthorized:!1}),e.exports=f}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,